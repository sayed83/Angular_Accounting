{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/inspaction-api.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\n\nfunction AddEditInspactionComponent_select_4_option_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const type_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", type_r2.inspactionTypeId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(type_r2.inspactionName);\n  }\n}\n\nfunction AddEditInspactionComponent_select_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"select\", 3);\n    i0.ɵɵlistener(\"ngModelChange\", function AddEditInspactionComponent_select_4_Template_select_ngModelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.inspactionTypeId = $event);\n    });\n    i0.ɵɵtemplate(1, AddEditInspactionComponent_select_4_option_1_Template, 2, 2, \"option\", 4);\n    i0.ɵɵpipe(2, \"async\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.inspactionTypeId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(2, 2, ctx_r0.inspactionTypesList$));\n  }\n}\n\nexport let AddEditInspactionComponent = /*#__PURE__*/(() => {\n  class AddEditInspactionComponent {\n    constructor(service) {\n      this.service = service;\n      this.inspactionId = 0;\n      this.status = \"\";\n      this.comments = \"\";\n    }\n\n    ngOnInit() {\n      this.inspactionId = this.inspaction.inspactionId;\n      this.status = this.inspaction.status;\n      this.comments = this.inspaction.comments;\n      this.inspactionTypeId = this.inspaction.inspactionTypeId;\n      this.inspactionList$ = this.service.getInspactionList();\n      this.statusList$ = this.service.getStatusList();\n      this.inspactionTypesList$ = this.service.getInspactionTypeList();\n    }\n\n  }\n\n  AddEditInspactionComponent.ɵfac = function AddEditInspactionComponent_Factory(t) {\n    return new (t || AddEditInspactionComponent)(i0.ɵɵdirectiveInject(i1.InspactionApiService));\n  };\n\n  AddEditInspactionComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddEditInspactionComponent,\n    selectors: [[\"app-add-edit-inspaction\"]],\n    inputs: {\n      inspaction: \"inspaction\"\n    },\n    decls: 5,\n    vars: 1,\n    consts: [[1, \"mb-3\"], [\"for\", \"inspactionTypeId\", 1, \"form-label\"], [\"name\", \"inspactionTypeId\", \"id\", \"inspactionTypeId\", \"class\", \"form-control\", 3, \"ngModel\", \"ngModelChange\", 4, \"ngIf\"], [\"name\", \"inspactionTypeId\", \"id\", \"inspactionTypeId\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"]],\n    template: function AddEditInspactionComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\")(1, \"div\", 0)(2, \"label\", 1);\n        i0.ɵɵtext(3, \"Inspection Type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(4, AddEditInspactionComponent_select_4_Template, 3, 4, \"select\", 2);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.inspaction.inspactionId == 0);\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgIf, i3.ɵNgNoValidate, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.SelectControlValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.NgModel, i3.NgForm, i2.AsyncPipe]\n  });\n  return AddEditInspactionComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}